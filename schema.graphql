type Form {
  _id: ID!
  questions: [Question!]!
  title: String!
}

input FormAnswerEntryInput {
  id: ID!
  result: [String!]
}

input FormInput {
  _id: ID
  questions: [QuestionInput!]!
  title: String!
}

type LoginResponse {
  _id: ID!
  name: String!
  token: String!
}

type Mutation {
  """
  Removes a form with an given ID
  """
  deleteForm(formId: ID!): Boolean
  login(password: String!, username: String!): LoginResponse

  """
  Used to create or update a form including questions
  """
  saveForm(form: FormInput!): Form

  """
  Submit the collected data of the user who filled the form
  """
  submitFormAnswer(data: [FormAnswerEntryInput!]!, formId: ID!): ID!
}

type Query {
  formById(id: ID!): Form
  forms: [Form!]!
}

interface Question {
  _id: ID!
  question: String!
}

input QuestionInput {
  select: SelectQuestionInput
  text: TextQuestionInput
}

type SelectQuestion implements Question {
  _id: ID!
  multiSelect: Boolean!
  options: [String!]!
  question: String!
}

input SelectQuestionInput {
  _id: ID
  multiSelect: Boolean!
  options: [String!]!
  question: String!
}

type TextQuestion implements Question {
  _id: ID!
  question: String!
}

input TextQuestionInput {
  _id: ID
  question: String!
}
